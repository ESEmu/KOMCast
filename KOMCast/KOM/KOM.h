#pragma once

#include <iostream>
#include <string>
#include <fstream>
#include <vector>
using namespace std;

namespace KOM
{
	enum COUNTRY_CODE
	{
		INT,
		TWHK,
		JP,
		EU,
		US,
		CN,
		TH,
		BR,
		DEFAULT
	};

	//REFLECTED CRC TABLE: https://github.com/Michaelangel007/crc32
	unsigned long CRC32Table[256] = {
		0x00000000, 0x06233697, 0x05C45641, 0x03E760D6, 0x020A97ED, 0x0429A17A, 0x07CEC1AC, 0x01EDF73B, //   0 [0x00 .. 0x07]
		0x04152FDA, 0x0236194D, 0x01D1799B, 0x07F24F0C, 0x061FB837, 0x003C8EA0, 0x03DBEE76, 0x05F8D8E1, //   8 [0x08 .. 0x0F]
		0x01A864DB, 0x078B524C, 0x046C329A, 0x024F040D, 0x03A2F336, 0x0581C5A1, 0x0666A577, 0x004593E0, //  16 [0x10 .. 0x17]
		0x05BD4B01, 0x039E7D96, 0x00791D40, 0x065A2BD7, 0x07B7DCEC, 0x0194EA7B, 0x02738AAD, 0x0450BC3A, //  24 [0x18 .. 0x1F]
		0x0350C9B6, 0x0573FF21, 0x06949FF7, 0x00B7A960, 0x015A5E5B, 0x077968CC, 0x049E081A, 0x02BD3E8D, //  32 [0x20 .. 0x27]
		0x0745E66C, 0x0166D0FB, 0x0281B02D, 0x04A286BA, 0x054F7181, 0x036C4716, 0x008B27C0, 0x06A81157, //  40 [0x28 .. 0x2F]
		0x02F8AD6D, 0x04DB9BFA, 0x073CFB2C, 0x011FCDBB, 0x00F23A80, 0x06D10C17, 0x05366CC1, 0x03155A56, //  48 [0x30 .. 0x37]
		0x06ED82B7, 0x00CEB420, 0x0329D4F6, 0x050AE261, 0x04E7155A, 0x02C423CD, 0x0123431B, 0x0700758C, //  56 [0x38 .. 0x3F]
		0x06A1936C, 0x0082A5FB, 0x0365C52D, 0x0546F3BA, 0x04AB0481, 0x02883216, 0x016F52C0, 0x074C6457, //  64 [0x40 .. 0x47]
		0x02B4BCB6, 0x04978A21, 0x0770EAF7, 0x0153DC60, 0x00BE2B5B, 0x069D1DCC, 0x057A7D1A, 0x03594B8D, //  72 [0x48 .. 0x4F]
		0x0709F7B7, 0x012AC120, 0x02CDA1F6, 0x04EE9761, 0x0503605A, 0x032056CD, 0x00C7361B, 0x06E4008C, //  80 [0x50 .. 0x57]
		0x031CD86D, 0x053FEEFA, 0x06D88E2C, 0x00FBB8BB, 0x01164F80, 0x07357917, 0x04D219C1, 0x02F12F56, //  88 [0x58 .. 0x5F]
		0x05F15ADA, 0x03D26C4D, 0x00350C9B, 0x06163A0C, 0x07FBCD37, 0x01D8FBA0, 0x023F9B76, 0x041CADE1, //  96 [0x60 .. 0x67]
		0x01E47500, 0x07C74397, 0x04202341, 0x020315D6, 0x03EEE2ED, 0x05CDD47A, 0x062AB4AC, 0x0009823B, // 104 [0x68 .. 0x6F]
		0x04593E01, 0x027A0896, 0x019D6840, 0x07BE5ED7, 0x0653A9EC, 0x00709F7B, 0x0397FFAD, 0x05B4C93A, // 112 [0x70 .. 0x77]
		0x004C11DB, 0x066F274C, 0x0588479A, 0x03AB710D, 0x02468636, 0x0465B0A1, 0x0782D077, 0x01A1E6E0, // 120 [0x78 .. 0x7F]
		0x04C11DB7, 0x02E22B20, 0x01054BF6, 0x07267D61, 0x06CB8A5A, 0x00E8BCCD, 0x030FDC1B, 0x052CEA8C, // 128 [0x80 .. 0x87]
		0x00D4326D, 0x06F704FA, 0x0510642C, 0x033352BB, 0x02DEA580, 0x04FD9317, 0x071AF3C1, 0x0139C556, // 136 [0x88 .. 0x8F]
		0x0569796C, 0x034A4FFB, 0x00AD2F2D, 0x068E19BA, 0x0763EE81, 0x0140D816, 0x02A7B8C0, 0x04848E57, // 144 [0x90 .. 0x97]
		0x017C56B6, 0x075F6021, 0x04B800F7, 0x029B3660, 0x0376C15B, 0x0555F7CC, 0x06B2971A, 0x0091A18D, // 152 [0x98 .. 0x9F]
		0x0791D401, 0x01B2E296, 0x02558240, 0x0476B4D7, 0x059B43EC, 0x03B8757B, 0x005F15AD, 0x067C233A, // 160 [0xA0 .. 0xA7]
		0x0384FBDB, 0x05A7CD4C, 0x0640AD9A, 0x00639B0D, 0x018E6C36, 0x07AD5AA1, 0x044A3A77, 0x02690CE0, // 168 [0xA8 .. 0xAF]
		0x0639B0DA, 0x001A864D, 0x03FDE69B, 0x05DED00C, 0x04332737, 0x021011A0, 0x01F77176, 0x07D447E1, // 176 [0xB0 .. 0xB7]
		0x022C9F00, 0x040FA997, 0x07E8C941, 0x01CBFFD6, 0x002608ED, 0x06053E7A, 0x05E25EAC, 0x03C1683B, // 184 [0xB8 .. 0xBF]
		0x02608EDB, 0x0443B84C, 0x07A4D89A, 0x0187EE0D, 0x006A1936, 0x06492FA1, 0x05AE4F77, 0x038D79E0, // 192 [0xC0 .. 0xC7]
		0x0675A101, 0x00569796, 0x03B1F740, 0x0592C1D7, 0x047F36EC, 0x025C007B, 0x01BB60AD, 0x0798563A, // 200 [0xC8 .. 0xCF]
		0x03C8EA00, 0x05EBDC97, 0x060CBC41, 0x002F8AD6, 0x01C27DED, 0x07E14B7A, 0x04062BAC, 0x02251D3B, // 208 [0xD0 .. 0xD7]
		0x07DDC5DA, 0x01FEF34D, 0x0219939B, 0x043AA50C, 0x05D75237, 0x03F464A0, 0x00130476, 0x063032E1, // 216 [0xD8 .. 0xDF]
		0x0130476D, 0x071371FA, 0x04F4112C, 0x02D727BB, 0x033AD080, 0x0519E617, 0x06FE86C1, 0x00DDB056, // 224 [0xE0 .. 0xE7]
		0x052568B7, 0x03065E20, 0x00E13EF6, 0x06C20861, 0x072FFF5A, 0x010CC9CD, 0x02EBA91B, 0x04C89F8C, // 232 [0xE8 .. 0xEF]
		0x009823B6, 0x06BB1521, 0x055C75F7, 0x037F4360, 0x0292B45B, 0x04B182CC, 0x0756E21A, 0x0175D48D, // 240 [0xF0 .. 0xF7]
		0x048D0C6C, 0x02AE3AFB, 0x01495A2D, 0x076A6CBA, 0x06879B81, 0x00A4AD16, 0x0343CDC0, 0x0560FB57, // 248 [0xF8 .. 0xFF]
	}

	typedef struct tEntry 
	{
		std::string FileName;
		uint32_t	Size = 0;
		uint32_t	CompressedSize = 0;
		std::string Checksum;
		std::string FileTime;
		uint8_t		Algorithm = 0;

		uint32_t	_Offset;
		std::string _Buffer;
	} Entry;

	typedef struct tKOM 
	{
		struct tHeader // 72 bytes
		{
			std::string Header;
			uint32_t	EntryCount;
			uint32_t	IsCompressed;
			uint32_t	CRC;
			uint32_t	XMLSize;
			std::string XML;
		} Header;
		
		vector<Entry*> Entries;
	} Package;

	class Extractor
	{
	private:

	protected:

		std::iostream* m_stream = nullptr;
		Package* m_kom;

	public:

		Extractor(std::string _path);
		Extractor(std::fstream* _stream);
		~Extractor();

		bool Open(std::string _path);
		bool Open(std::fstream* _stream);

		Package Process();

		std::string PostProcess(tEntry* _entry);

	};

	class Kompactor 
	{
	private:

	protected:

		std::iostream* m_stream = nullptr;
		Package* m_kom;

	public:

		Kompactor(std::string _outPath);
		Kompactor(Package* _kom, std::string _outPath);
		~Kompactor();

		std::string MakeXML();

		void Process(vector<tEntry*> _entries);
		void Process(vector<string> _paths);
		void Process(string _root);

	};
}